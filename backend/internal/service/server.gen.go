// Package service provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package service

import (
	"fmt"
	"net/url"
	"time"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for PatientTherapyTypes.
const (
	GroupTherapy PatientTherapyTypes = "Group Therapy"
	TRM          PatientTherapyTypes = "TRM"
)

// Defines values for SessionResponse.
const (
	High     SessionResponse = "High"
	Low      SessionResponse = "Low"
	Moderate SessionResponse = "Moderate"
)

// Defines values for StaffRole.
const (
	Admin             StaffRole = "admin"
	BehavioralAnalyst StaffRole = "behavioral_analyst"
	Doctor            StaffRole = "doctor"
	Therapist         StaffRole = "therapist"
)

// Activity defines model for Activity.
type Activity struct {
	// Description A summarized description of the activity.
	Description *string `json:"description,omitempty"`

	// DurationMinutes The duration of the activity in minutes.
	DurationMinutes *float32 `json:"duration_minutes,omitempty"`

	// Id The unique identifier for the activity.
	Id *string `json:"id,omitempty"`

	// PaymentReceived A representation of whether the activity has been paid.
	PaymentReceived *bool `json:"payment_received,omitempty"`

	// SessionId The associated session for the activity.
	SessionId *string `json:"session_id,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// PaginatedResponse defines model for PaginatedResponse.
type PaginatedResponse struct {
	Data       *[]map[string]interface{} `json:"data,omitempty"`
	Pagination *struct {
		Limit *int `json:"limit,omitempty"`
		Page  *int `json:"page,omitempty"`
		Pages *int `json:"pages,omitempty"`
		Total *int `json:"total,omitempty"`
	} `json:"pagination,omitempty"`
}

// Patient defines model for Patient.
type Patient struct {
	// Active Represents the current patient status.
	Active *bool `json:"active,omitempty"`

	// CreatedAt Timestamp when the patient record was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Dob Patient Date of Birth
	Dob openapi_types.Date `json:"dob"`

	// DoctorId The primary physician for the patient.
	DoctorId *string `json:"doctor_id,omitempty"`

	// GuardianId ID of the patient's guardian.
	GuardianId *string `json:"guardian_id,omitempty"`

	// Id A unique identifier for the patient.
	Id *string `json:"id,omitempty"`

	// Name Full name of the patient.
	Name string `json:"name"`

	// PrescribedMedicines List of prescribed medicines
	PrescribedMedicines *[]string `json:"prescribed_medicines,omitempty"`

	// StaffId The unique identifier of the assigned staff member.
	StaffId      string               `json:"staff_id"`
	TherapyTypes *PatientTherapyTypes `json:"therapy_types,omitempty"`

	// UpdatedAt Timestamp when the patient record was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// PatientTherapyTypes defines model for Patient.TherapyTypes.
type PatientTherapyTypes string

// Session defines model for Session.
type Session struct {
	// Description A summarized description of the overall session.
	Description *string `json:"description,omitempty"`

	// EndTime The end time of the overall session.
	EndTime *time.Time `json:"end_time,omitempty"`

	// Id The unique identifier for the session.
	Id *string `json:"id,omitempty"`

	// PatientId The unique patient identifier involved with the session.
	PatientId *string `json:"patient_id,omitempty"`

	// PaymentReceived A representation of whether the session has been paid.
	PaymentReceived *bool `json:"payment_received,omitempty"`

	// Response A measurement of the patient's response to the treatment of the session.
	Response *SessionResponse `json:"response,omitempty"`

	// StaffId The unique staff identifier administering the session.
	StaffId *string `json:"staff_id,omitempty"`

	// StartTime The start time of the overall session.
	StartTime *time.Time `json:"start_time,omitempty"`
}

// SessionResponse A measurement of the patient's response to the treatment of the session.
type SessionResponse string

// Staff defines model for Staff.
type Staff struct {
	// ExpectedHours The number of expected hours per week worked.
	ExpectedHours *float32 `json:"expected_hours,omitempty"`

	// Id A unique identifier for the staff member.
	Id string `json:"id"`

	// JoinDate Date of which the staff member commenced.
	JoinDate *openapi_types.Date `json:"join_date,omitempty"`

	// Name The name of the staff member.
	Name string `json:"name"`

	// Role The role of the staff member in the organization.
	Role StaffRole `json:"role"`
}

// StaffRole The role of the staff member in the organization.
type StaffRole string

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Errors []struct {
		Message string `json:"message"`
		Path    string `json:"path"`
	} `json:"errors"`
	Message string `json:"message"`
}

// GetPatientsParams defines parameters for GetPatients.
type GetPatientsParams struct {
	Page  *int `form:"page,omitempty" json:"page,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetPatientsPatientIdSessionsParams defines parameters for GetPatientsPatientIdSessions.
type GetPatientsPatientIdSessionsParams struct {
	Page      *int                `form:"page,omitempty" json:"page,omitempty"`
	Limit     *int                `form:"limit,omitempty" json:"limit,omitempty"`
	StartDate *openapi_types.Date `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *openapi_types.Date `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetSessionsParams defines parameters for GetSessions.
type GetSessionsParams struct {
	Page      *int                `form:"page,omitempty" json:"page,omitempty"`
	Limit     *int                `form:"limit,omitempty" json:"limit,omitempty"`
	StartDate *openapi_types.Date `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *openapi_types.Date `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetStaffParams defines parameters for GetStaff.
type GetStaffParams struct {
	Page  *int `form:"page,omitempty" json:"page,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetStaffIdSessionsParams defines parameters for GetStaffIdSessions.
type GetStaffIdSessionsParams struct {
	Page      *int                `form:"page,omitempty" json:"page,omitempty"`
	Limit     *int                `form:"limit,omitempty" json:"limit,omitempty"`
	StartDate *openapi_types.Date `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *openapi_types.Date `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetStaffStaffIdSessionsSessionIdActivitiesParams defines parameters for GetStaffStaffIdSessionsSessionIdActivities.
type GetStaffStaffIdSessionsSessionIdActivitiesParams struct {
	Page  *int `form:"page,omitempty" json:"page,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostPatientsJSONRequestBody defines body for PostPatients for application/json ContentType.
type PostPatientsJSONRequestBody = Patient

// PutPatientsIdJSONRequestBody defines body for PutPatientsId for application/json ContentType.
type PutPatientsIdJSONRequestBody = Patient

// PostSessionsJSONRequestBody defines body for PostSessions for application/json ContentType.
type PostSessionsJSONRequestBody = Session

// PutSessionsIdJSONRequestBody defines body for PutSessionsId for application/json ContentType.
type PutSessionsIdJSONRequestBody = Session

// PostStaffJSONRequestBody defines body for PostStaff for application/json ContentType.
type PostStaffJSONRequestBody = Staff

// PutStaffIdJSONRequestBody defines body for PutStaffId for application/json ContentType.
type PutStaffIdJSONRequestBody = Staff

// PostStaffStaffIdSessionsSessionIdActivitiesJSONRequestBody defines body for PostStaffStaffIdSessionsSessionIdActivities for application/json ContentType.
type PostStaffStaffIdSessionsSessionIdActivitiesJSONRequestBody = Activity

// PutStaffStaffIdSessionsSessionIdActivitiesIdJSONRequestBody defines body for PutStaffStaffIdSessionsSessionIdActivitiesId for application/json ContentType.
type PutStaffStaffIdSessionsSessionIdActivitiesIdJSONRequestBody = Activity

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all patients
	// (GET /patients)
	GetPatients(c *fiber.Ctx, params GetPatientsParams) error
	// Create a new patient
	// (POST /patients)
	PostPatients(c *fiber.Ctx) error
	// Delete a patient
	// (DELETE /patients/{id})
	DeletePatientsId(c *fiber.Ctx, id float32) error
	// Get patient by ID
	// (GET /patients/{id})
	GetPatientsId(c *fiber.Ctx, id float32) error
	// Update patient information
	// (PUT /patients/{id})
	PutPatientsId(c *fiber.Ctx, id float32) error
	// Get all sessions for a patient
	// (GET /patients/{patient_id}/sessions)
	GetPatientsPatientIdSessions(c *fiber.Ctx, patientId float32, params GetPatientsPatientIdSessionsParams) error
	// Get specific session for a patient
	// (GET /patients/{patient_id}/sessions/{session_id})
	GetPatientsPatientIdSessionsSessionId(c *fiber.Ctx, patientId float32, sessionId float32) error
	// List all sessions
	// (GET /sessions)
	GetSessions(c *fiber.Ctx, params GetSessionsParams) error
	// Create a new session
	// (POST /sessions)
	PostSessions(c *fiber.Ctx) error
	// Delete a session
	// (DELETE /sessions/{id})
	DeleteSessionsId(c *fiber.Ctx, id float32) error
	// Get session by ID
	// (GET /sessions/{id})
	GetSessionsId(c *fiber.Ctx, id float32) error
	// Update session information
	// (PUT /sessions/{id})
	PutSessionsId(c *fiber.Ctx, id float32) error
	// Get detailed session information
	// (GET /sessions/{id}/details)
	GetSessionsIdDetails(c *fiber.Ctx, id float32) error
	// List all staff members.
	// (GET /staff)
	GetStaff(c *fiber.Ctx, params GetStaffParams) error
	// Create a new staff person.
	// (POST /staff)
	PostStaff(c *fiber.Ctx) error
	// Delete a staff member from application.
	// (DELETE /staff/{id})
	DeleteStaffId(c *fiber.Ctx, id float32) error
	// Get staff by ID
	// (GET /staff/{id})
	GetStaffId(c *fiber.Ctx, id float32) error
	// Update staff information
	// (PUT /staff/{id})
	PutStaffId(c *fiber.Ctx, id float32) error
	// Get all sessions for a staff member
	// (GET /staff/{id}/sessions)
	GetStaffIdSessions(c *fiber.Ctx, id float32, params GetStaffIdSessionsParams) error
	// List all activities in a session
	// (GET /staff/{staff_id}/sessions/{session_id}/activities)
	GetStaffStaffIdSessionsSessionIdActivities(c *fiber.Ctx, staffId float32, sessionId float32, params GetStaffStaffIdSessionsSessionIdActivitiesParams) error
	// Create a new activity
	// (POST /staff/{staff_id}/sessions/{session_id}/activities)
	PostStaffStaffIdSessionsSessionIdActivities(c *fiber.Ctx, staffId float32, sessionId float32) error
	// Delete an activity
	// (DELETE /staff/{staff_id}/sessions/{session_id}/activities/{id})
	DeleteStaffStaffIdSessionsSessionIdActivitiesId(c *fiber.Ctx, staffId float32, sessionId float32, id float32) error
	// Get specific activity
	// (GET /staff/{staff_id}/sessions/{session_id}/activities/{id})
	GetStaffStaffIdSessionsSessionIdActivitiesId(c *fiber.Ctx, staffId float32, sessionId float32, id float32) error
	// Update activity information
	// (PUT /staff/{staff_id}/sessions/{session_id}/activities/{id})
	PutStaffStaffIdSessionsSessionIdActivitiesId(c *fiber.Ctx, staffId float32, sessionId float32, id float32) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetPatients operation middleware
func (siw *ServerInterfaceWrapper) GetPatients(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPatientsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.GetPatients(c, params)
}

// PostPatients operation middleware
func (siw *ServerInterfaceWrapper) PostPatients(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostPatients(c)
}

// DeletePatientsId operation middleware
func (siw *ServerInterfaceWrapper) DeletePatientsId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id float32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeletePatientsId(c, id)
}

// GetPatientsId operation middleware
func (siw *ServerInterfaceWrapper) GetPatientsId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id float32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetPatientsId(c, id)
}

// PutPatientsId operation middleware
func (siw *ServerInterfaceWrapper) PutPatientsId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id float32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PutPatientsId(c, id)
}

// GetPatientsPatientIdSessions operation middleware
func (siw *ServerInterfaceWrapper) GetPatientsPatientIdSessions(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "patient_id" -------------
	var patientId float32

	err = runtime.BindStyledParameterWithOptions("simple", "patient_id", c.Params("patient_id"), &patientId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter patient_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPatientsPatientIdSessionsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", query, &params.StartDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter start_date: %w", err).Error())
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", query, &params.EndDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter end_date: %w", err).Error())
	}

	return siw.Handler.GetPatientsPatientIdSessions(c, patientId, params)
}

// GetPatientsPatientIdSessionsSessionId operation middleware
func (siw *ServerInterfaceWrapper) GetPatientsPatientIdSessionsSessionId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "patient_id" -------------
	var patientId float32

	err = runtime.BindStyledParameterWithOptions("simple", "patient_id", c.Params("patient_id"), &patientId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter patient_id: %w", err).Error())
	}

	// ------------- Path parameter "session_id" -------------
	var sessionId float32

	err = runtime.BindStyledParameterWithOptions("simple", "session_id", c.Params("session_id"), &sessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter session_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetPatientsPatientIdSessionsSessionId(c, patientId, sessionId)
}

// GetSessions operation middleware
func (siw *ServerInterfaceWrapper) GetSessions(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSessionsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", query, &params.StartDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter start_date: %w", err).Error())
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", query, &params.EndDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter end_date: %w", err).Error())
	}

	return siw.Handler.GetSessions(c, params)
}

// PostSessions operation middleware
func (siw *ServerInterfaceWrapper) PostSessions(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostSessions(c)
}

// DeleteSessionsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteSessionsId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id float32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteSessionsId(c, id)
}

// GetSessionsId operation middleware
func (siw *ServerInterfaceWrapper) GetSessionsId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id float32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetSessionsId(c, id)
}

// PutSessionsId operation middleware
func (siw *ServerInterfaceWrapper) PutSessionsId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id float32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PutSessionsId(c, id)
}

// GetSessionsIdDetails operation middleware
func (siw *ServerInterfaceWrapper) GetSessionsIdDetails(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id float32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetSessionsIdDetails(c, id)
}

// GetStaff operation middleware
func (siw *ServerInterfaceWrapper) GetStaff(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStaffParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.GetStaff(c, params)
}

// PostStaff operation middleware
func (siw *ServerInterfaceWrapper) PostStaff(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostStaff(c)
}

// DeleteStaffId operation middleware
func (siw *ServerInterfaceWrapper) DeleteStaffId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id float32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteStaffId(c, id)
}

// GetStaffId operation middleware
func (siw *ServerInterfaceWrapper) GetStaffId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id float32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetStaffId(c, id)
}

// PutStaffId operation middleware
func (siw *ServerInterfaceWrapper) PutStaffId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id float32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PutStaffId(c, id)
}

// GetStaffIdSessions operation middleware
func (siw *ServerInterfaceWrapper) GetStaffIdSessions(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id float32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStaffIdSessionsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", query, &params.StartDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter start_date: %w", err).Error())
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", query, &params.EndDate)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter end_date: %w", err).Error())
	}

	return siw.Handler.GetStaffIdSessions(c, id, params)
}

// GetStaffStaffIdSessionsSessionIdActivities operation middleware
func (siw *ServerInterfaceWrapper) GetStaffStaffIdSessionsSessionIdActivities(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "staff_id" -------------
	var staffId float32

	err = runtime.BindStyledParameterWithOptions("simple", "staff_id", c.Params("staff_id"), &staffId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter staff_id: %w", err).Error())
	}

	// ------------- Path parameter "session_id" -------------
	var sessionId float32

	err = runtime.BindStyledParameterWithOptions("simple", "session_id", c.Params("session_id"), &sessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter session_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStaffStaffIdSessionsSessionIdActivitiesParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.GetStaffStaffIdSessionsSessionIdActivities(c, staffId, sessionId, params)
}

// PostStaffStaffIdSessionsSessionIdActivities operation middleware
func (siw *ServerInterfaceWrapper) PostStaffStaffIdSessionsSessionIdActivities(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "staff_id" -------------
	var staffId float32

	err = runtime.BindStyledParameterWithOptions("simple", "staff_id", c.Params("staff_id"), &staffId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter staff_id: %w", err).Error())
	}

	// ------------- Path parameter "session_id" -------------
	var sessionId float32

	err = runtime.BindStyledParameterWithOptions("simple", "session_id", c.Params("session_id"), &sessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter session_id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PostStaffStaffIdSessionsSessionIdActivities(c, staffId, sessionId)
}

// DeleteStaffStaffIdSessionsSessionIdActivitiesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteStaffStaffIdSessionsSessionIdActivitiesId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "staff_id" -------------
	var staffId float32

	err = runtime.BindStyledParameterWithOptions("simple", "staff_id", c.Params("staff_id"), &staffId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter staff_id: %w", err).Error())
	}

	// ------------- Path parameter "session_id" -------------
	var sessionId float32

	err = runtime.BindStyledParameterWithOptions("simple", "session_id", c.Params("session_id"), &sessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter session_id: %w", err).Error())
	}

	// ------------- Path parameter "id" -------------
	var id float32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DeleteStaffStaffIdSessionsSessionIdActivitiesId(c, staffId, sessionId, id)
}

// GetStaffStaffIdSessionsSessionIdActivitiesId operation middleware
func (siw *ServerInterfaceWrapper) GetStaffStaffIdSessionsSessionIdActivitiesId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "staff_id" -------------
	var staffId float32

	err = runtime.BindStyledParameterWithOptions("simple", "staff_id", c.Params("staff_id"), &staffId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter staff_id: %w", err).Error())
	}

	// ------------- Path parameter "session_id" -------------
	var sessionId float32

	err = runtime.BindStyledParameterWithOptions("simple", "session_id", c.Params("session_id"), &sessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter session_id: %w", err).Error())
	}

	// ------------- Path parameter "id" -------------
	var id float32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.GetStaffStaffIdSessionsSessionIdActivitiesId(c, staffId, sessionId, id)
}

// PutStaffStaffIdSessionsSessionIdActivitiesId operation middleware
func (siw *ServerInterfaceWrapper) PutStaffStaffIdSessionsSessionIdActivitiesId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "staff_id" -------------
	var staffId float32

	err = runtime.BindStyledParameterWithOptions("simple", "staff_id", c.Params("staff_id"), &staffId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter staff_id: %w", err).Error())
	}

	// ------------- Path parameter "session_id" -------------
	var sessionId float32

	err = runtime.BindStyledParameterWithOptions("simple", "session_id", c.Params("session_id"), &sessionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter session_id: %w", err).Error())
	}

	// ------------- Path parameter "id" -------------
	var id float32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.PutStaffStaffIdSessionsSessionIdActivitiesId(c, staffId, sessionId, id)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/patients", wrapper.GetPatients)

	router.Post(options.BaseURL+"/patients", wrapper.PostPatients)

	router.Delete(options.BaseURL+"/patients/:id", wrapper.DeletePatientsId)

	router.Get(options.BaseURL+"/patients/:id", wrapper.GetPatientsId)

	router.Put(options.BaseURL+"/patients/:id", wrapper.PutPatientsId)

	router.Get(options.BaseURL+"/patients/:patient_id/sessions", wrapper.GetPatientsPatientIdSessions)

	router.Get(options.BaseURL+"/patients/:patient_id/sessions/:session_id", wrapper.GetPatientsPatientIdSessionsSessionId)

	router.Get(options.BaseURL+"/sessions", wrapper.GetSessions)

	router.Post(options.BaseURL+"/sessions", wrapper.PostSessions)

	router.Delete(options.BaseURL+"/sessions/:id", wrapper.DeleteSessionsId)

	router.Get(options.BaseURL+"/sessions/:id", wrapper.GetSessionsId)

	router.Put(options.BaseURL+"/sessions/:id", wrapper.PutSessionsId)

	router.Get(options.BaseURL+"/sessions/:id/details", wrapper.GetSessionsIdDetails)

	router.Get(options.BaseURL+"/staff", wrapper.GetStaff)

	router.Post(options.BaseURL+"/staff", wrapper.PostStaff)

	router.Delete(options.BaseURL+"/staff/:id", wrapper.DeleteStaffId)

	router.Get(options.BaseURL+"/staff/:id", wrapper.GetStaffId)

	router.Put(options.BaseURL+"/staff/:id", wrapper.PutStaffId)

	router.Get(options.BaseURL+"/staff/:id/sessions", wrapper.GetStaffIdSessions)

	router.Get(options.BaseURL+"/staff/:staff_id/sessions/:session_id/activities", wrapper.GetStaffStaffIdSessionsSessionIdActivities)

	router.Post(options.BaseURL+"/staff/:staff_id/sessions/:session_id/activities", wrapper.PostStaffStaffIdSessionsSessionIdActivities)

	router.Delete(options.BaseURL+"/staff/:staff_id/sessions/:session_id/activities/:id", wrapper.DeleteStaffStaffIdSessionsSessionIdActivitiesId)

	router.Get(options.BaseURL+"/staff/:staff_id/sessions/:session_id/activities/:id", wrapper.GetStaffStaffIdSessionsSessionIdActivitiesId)

	router.Put(options.BaseURL+"/staff/:staff_id/sessions/:session_id/activities/:id", wrapper.PutStaffStaffIdSessionsSessionIdActivitiesId)

}
