/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Balano API
 * Balano is a system to track therapy sessions, initially built for use at Dr. Beema Clinic for Child Development. Following either ABA or IBT standards, therapists can report and monitor progress of a child patient, while supervisors can also generate reports and monitor the activities made.
Activities are split into categories based on the individualized forms of therapy assigned.

 * OpenAPI spec version: 0.1.0
 */
import * as axios from "axios";
import type { AxiosRequestConfig, AxiosResponse } from "axios";
export type GetTherapistsTherapistIdSessionsSessionIdActivitiesParams = {
  page?: number;
  limit?: number;
};

export type GetTherapistsTherapistIdSessionsParams = {
  page?: number;
  limit?: number;
  start_date?: string;
  end_date?: string;
};

export type GetPatientsPatientIdSessionsParams = {
  page?: number;
  limit?: number;
  start_date?: string;
  end_date?: string;
};

export type GetSessionsParams = {
  page?: number;
  limit?: number;
  start_date?: string;
  end_date?: string;
};

export type GetTherapistsParams = {
  page?: number;
  limit?: number;
};

export type GetPatientsParams = {
  page?: number;
  limit?: number;
};

export interface Activity {
  /** The unique identifier for the activity. */
  id?: number;
  /** The associated session for the activity. */
  session_id?: number;
  /** The duration of the activity in minutes. */
  duration_minutes?: number;
  /** A summarized description of the activity. */
  description?: string;
  /** A representation of whether the activity has been paid. */
  payment_received?: boolean;
}

export interface Session {
  /** The unique identifier for the session. */
  id?: number;
  /** The unique patient identifier involved with the session. */
  patient_id?: number;
  /** The unique staff identifier administering the session. */
  staff_id?: number;
  /** The start time of the overall session. */
  start_time?: string;
  /** The end time of the overall session. */
  end_time?: string;
  /** A summarized description of the overall session. */
  description?: string;
  /** A representation of whether the session has been paid. */
  payment_received?: boolean;
}

export type GetSessionsIdDetails200 = {
  session?: Session;
  patient?: Patient;
  therapist?: Therapist;
  activities?: Activity[];
};

/**
 * The role of the staff member in the organization.
 */
export type TherapistRole = (typeof TherapistRole)[keyof typeof TherapistRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TherapistRole = {
  admin: "admin",
  therapist: "therapist",
  doctor: "doctor",
} as const;

export interface Therapist {
  /** A unique identifier for the staff member. */
  id: number;
  /** The name of the staff member. */
  name: string;
  /** Date of which the staff member commenced. */
  join_date?: string;
  /** The number of expected hours per week worked. */
  expected_hours?: number;
  /** The role of the staff member in the organization. */
  role: TherapistRole;
}

/**
 * Represents the current patient status.
 */
export type PatientStatus = (typeof PatientStatus)[keyof typeof PatientStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatientStatus = {
  ACTIVE: "ACTIVE",
  INACTIVE: "INACTIVE",
} as const;

export interface Patient {
  /** A unique identifier for the patient. */
  id?: number;
  /** Full name of the patient. */
  name: string;
  /** Patient Date of Birth */
  dob: string;
  /** Full name of the parent's guardian. */
  guardian?: string;
  /** Represents the current patient status. */
  status: PatientStatus;
  /**
   * Guardian's phone number (optional).
   * @nullable
   */
  guardian_number?: number | null;
  /**
   * Guardian's email address (optional).
   * @nullable
   */
  guardian_email?: string | null;
  /** Timestamp when the patient record was created. */
  created_at?: string;
  /** Timestamp when the patient record was last updated. */
  updated_at?: string;
  /** The unique identifier of the assigned therapist. */
  therapist_id: number;
}

export type PaginatedResponsePagination = {
  total?: number;
  page?: number;
  pages?: number;
  limit?: number;
};

export type PaginatedResponseDataItem = { [key: string]: unknown };

export interface PaginatedResponse {
  data?: PaginatedResponseDataItem[];
  pagination?: PaginatedResponsePagination;
}

export type ValidationErrorErrorsItem = {
  path: string;
  message: string;
};

export interface ValidationError {
  message: string;
  errors: ValidationErrorErrorsItem[];
}

export interface Error {
  error: string;
}

/**
 * @summary Create a new patient
 */
export const postPatients = <TData = AxiosResponse<Patient>>(
  patient: Patient,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.post(`/patients`, patient, options);
};

/**
 * @summary List all patients
 */
export const getPatients = <TData = AxiosResponse<PaginatedResponse>>(
  params?: GetPatientsParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.get(`/patients`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * @summary Get patient by ID
 */
export const getPatientsId = <TData = AxiosResponse<Patient>>(
  id: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.get(`/patients/${id}`, options);
};

/**
 * @summary Update patient information
 */
export const putPatientsId = <TData = AxiosResponse<Patient>>(
  id: number,
  patient: Patient,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.put(`/patients/${id}`, patient, options);
};

/**
 * @summary Delete a patient
 */
export const deletePatientsId = <TData = AxiosResponse<void>>(
  id: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.delete(`/patients/${id}`, options);
};

/**
 * @summary Create a new therapist
 */
export const postTherapists = <TData = AxiosResponse<Therapist>>(
  therapist: Therapist,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.post(`/therapists`, therapist, options);
};

/**
 * @summary List all therapists
 */
export const getTherapists = <TData = AxiosResponse<PaginatedResponse>>(
  params?: GetTherapistsParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.get(`/therapists`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * @summary Get therapist by ID
 */
export const getTherapistsId = <TData = AxiosResponse<Therapist>>(
  id: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.get(`/therapists/${id}`, options);
};

/**
 * @summary Update therapist information
 */
export const putTherapistsId = <TData = AxiosResponse<Therapist>>(
  id: number,
  therapist: Therapist,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.put(`/therapists/${id}`, therapist, options);
};

/**
 * @summary Delete a therapist
 */
export const deleteTherapistsId = <TData = AxiosResponse<void>>(
  id: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.delete(`/therapists/${id}`, options);
};

/**
 * @summary Create a new session
 */
export const postSessions = <TData = AxiosResponse<Session>>(
  session: Session,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.post(`/sessions`, session, options);
};

/**
 * @summary List all sessions
 */
export const getSessions = <TData = AxiosResponse<PaginatedResponse>>(
  params?: GetSessionsParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.get(`/sessions`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * @summary Get session by ID
 */
export const getSessionsId = <TData = AxiosResponse<Session>>(
  id: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.get(`/sessions/${id}`, options);
};

/**
 * @summary Update session information
 */
export const putSessionsId = <TData = AxiosResponse<Session>>(
  id: number,
  session: Session,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.put(`/sessions/${id}`, session, options);
};

/**
 * @summary Delete a session
 */
export const deleteSessionsId = <TData = AxiosResponse<void>>(
  id: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.delete(`/sessions/${id}`, options);
};

/**
 * @summary Get detailed session information
 */
export const getSessionsIdDetails = <
  TData = AxiosResponse<GetSessionsIdDetails200>
>(
  id: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.get(`/sessions/${id}/details`, options);
};

/**
 * @summary Get all sessions for a patient
 */
export const getPatientsPatientIdSessions = <
  TData = AxiosResponse<PaginatedResponse>
>(
  patientId: number,
  params?: GetPatientsPatientIdSessionsParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.get(`/patients/${patientId}/sessions`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * @summary Get specific session for a patient
 */
export const getPatientsPatientIdSessionsSessionId = <
  TData = AxiosResponse<Session>
>(
  patientId: number,
  sessionId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.get(
    `/patients/${patientId}/sessions/${sessionId}`,
    options
  );
};

/**
 * @summary Get all sessions for a therapist
 */
export const getTherapistsTherapistIdSessions = <
  TData = AxiosResponse<PaginatedResponse>
>(
  therapistId: number,
  params?: GetTherapistsTherapistIdSessionsParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.get(`/therapists/${therapistId}/sessions`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * @summary Create a new activity
 */
export const postTherapistsTherapistIdSessionsSessionIdActivities = <
  TData = AxiosResponse<Activity>
>(
  therapistId: number,
  sessionId: number,
  activity: Activity,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.post(
    `/therapists/${therapistId}/sessions/${sessionId}/activities`,
    activity,
    options
  );
};

/**
 * @summary List all activities in a session
 */
export const getTherapistsTherapistIdSessionsSessionIdActivities = <
  TData = AxiosResponse<PaginatedResponse>
>(
  therapistId: number,
  sessionId: number,
  params?: GetTherapistsTherapistIdSessionsSessionIdActivitiesParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.get(
    `/therapists/${therapistId}/sessions/${sessionId}/activities`,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );
};

/**
 * @summary Get specific activity
 */
export const getTherapistsTherapistIdSessionsSessionIdActivitiesId = <
  TData = AxiosResponse<Activity>
>(
  therapistId: number,
  sessionId: number,
  id: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.get(
    `/therapists/${therapistId}/sessions/${sessionId}/activities/${id}`,
    options
  );
};

/**
 * @summary Update activity information
 */
export const putTherapistsTherapistIdSessionsSessionIdActivitiesId = <
  TData = AxiosResponse<Activity>
>(
  therapistId: number,
  sessionId: number,
  id: number,
  activity: Activity,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.put(
    `/therapists/${therapistId}/sessions/${sessionId}/activities/${id}`,
    activity,
    options
  );
};

/**
 * @summary Delete an activity
 */
export const deleteTherapistsTherapistIdSessionsSessionIdActivitiesId = <
  TData = AxiosResponse<void>
>(
  therapistId: number,
  sessionId: number,
  id: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.delete(
    `/therapists/${therapistId}/sessions/${sessionId}/activities/${id}`,
    options
  );
};

export type PostPatientsResult = AxiosResponse<Patient>;
export type GetPatientsResult = AxiosResponse<PaginatedResponse>;
export type GetPatientsIdResult = AxiosResponse<Patient>;
export type PutPatientsIdResult = AxiosResponse<Patient>;
export type DeletePatientsIdResult = AxiosResponse<void>;
export type PostTherapistsResult = AxiosResponse<Therapist>;
export type GetTherapistsResult = AxiosResponse<PaginatedResponse>;
export type GetTherapistsIdResult = AxiosResponse<Therapist>;
export type PutTherapistsIdResult = AxiosResponse<Therapist>;
export type DeleteTherapistsIdResult = AxiosResponse<void>;
export type PostSessionsResult = AxiosResponse<Session>;
export type GetSessionsResult = AxiosResponse<PaginatedResponse>;
export type GetSessionsIdResult = AxiosResponse<Session>;
export type PutSessionsIdResult = AxiosResponse<Session>;
export type DeleteSessionsIdResult = AxiosResponse<void>;
export type GetSessionsIdDetailsResult = AxiosResponse<GetSessionsIdDetails200>;
export type GetPatientsPatientIdSessionsResult =
  AxiosResponse<PaginatedResponse>;
export type GetPatientsPatientIdSessionsSessionIdResult =
  AxiosResponse<Session>;
export type GetTherapistsTherapistIdSessionsResult =
  AxiosResponse<PaginatedResponse>;
export type PostTherapistsTherapistIdSessionsSessionIdActivitiesResult =
  AxiosResponse<Activity>;
export type GetTherapistsTherapistIdSessionsSessionIdActivitiesResult =
  AxiosResponse<PaginatedResponse>;
export type GetTherapistsTherapistIdSessionsSessionIdActivitiesIdResult =
  AxiosResponse<Activity>;
export type PutTherapistsTherapistIdSessionsSessionIdActivitiesIdResult =
  AxiosResponse<Activity>;
export type DeleteTherapistsTherapistIdSessionsSessionIdActivitiesIdResult =
  AxiosResponse<void>;
